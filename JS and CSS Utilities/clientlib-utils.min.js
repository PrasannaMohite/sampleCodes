!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);n(1),n(2),n(3),n(0)},function(e,t,n){},function(e,t){},function(e,t){}]);
/***** THIS IS FOR InstaSavings Form *****/
var currentFormContext = {
	"sliderRef": "",
    "currentFormPage" : "",
	"tenureRef": "",
	"initialInterestVal": "",
	"initialTidVal": "",
	"initialTenureVal": "",
	"interestVal": "",
	"tidVal": "",
	"tenureVal": "",
	"encryptedToken": "",
	"relationNumber": "",
	"transferMethod": "",
	"casaUser": "",
    "existingCustomer" : "",
	"aanNumber": "",
    "Idtokenjwt" : "",
	"primaryCardHolderName": "",
	"journeyID": "",
	"journeyName": "INSTA_SAVINGS_JOURNEY",
	"journeyState": "CUSTOMER_IDENTITY_INITIATED",
	"errorMessage": "",
	"wrongOtpCount": 0,
	"wrongOtpCount1": 0,
	"leadNumber": "",
    "leadProfileId" : "",
    "pseudoID" : "",
	"journeyApiUri": "/content/hdfc_commonforms/api/journeydropoff.json",
	"journeyJsonObject": {},
	"emailId": "",
	"officialEmailId": "",
	"journeyUpdateStatus": true,
    "DemogAPI_Address1":  "",
    "DemogAPI_Address2":  "",
    "DemogAPI_Address3":  "",
    "DemogAPI_Pin":  "",
    "DemogAPI_City":  "",
    "DemogAPI_State":  "",
    "namePercentage": "",
	"schemaName": "InstaSavings",
    "formRedirectURL" : "",
    "aadharEKYC" : "",
    "aadharNo": "",
    "aadharRefNo" : "",
    "RRN" : "",
    "validPAN" :"N",
    "fName" :"",
    "mName" :"",
    "lName" :""
};

function identifyReturningUser() {
	var returningUser = false;
	var queryString = window.location.search;
	var urlParams = new URLSearchParams(queryString);
	if (urlParams !== "" || urlParams !== null) {
		var jid = urlParams.get('jid');
		if (jid !== "" && jid !== null) {
			return true;
		} else {
			return false;
		}
	} else {
		return false;
	}
}

var returningUser = identifyReturningUser();
if (returningUser) {
	currentFormContext.journeyID = createJourneyId("R", "InstaSavings", "WEB");
} else {
	currentFormContext.journeyID = createJourneyId("U", "InstaSavings", "WEB");
}


function beforeSendCallBack() {
	$.loadingBlockShow();
}
function afterSendCallBack() {
	$.loadingBlockHide();
}
function uploadJsonRequest(mobileNumber){
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.mobileNumber = mobileNumber;
    jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.userAgent = navigator.userAgent;
    jsonobj.requestString.Idtokenjwt = currentFormContext.Idtokenjwt;
	return jsonobj;
}

function OTPGenerationJSONRequest(mobileNumber, DoB){
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.mobileNumber = mobileNumber;
    jsonobj.requestString.identifierValue = DoB;
    jsonobj.requestString.identifierName = "DOB"
    jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.userAgent = navigator.userAgent;
	return jsonobj;
}

function offerAvailabilityJSONRequest(mobileNumber, DoB){
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.mobileNumber = mobileNumber;
	jsonobj.requestString.identifierValue = DoB;
    jsonobj.requestString.identifierName = "DOB"
    jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.userAgent = navigator.userAgent;
	return jsonobj;
}
function otpValidationJsonRequest(phoneNumber, DoB, otp){
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.mobileNumber = phoneNumber;
    jsonobj.requestString.identifierValue = DoB;
    jsonobj.requestString.identifierName = "DOB"
	jsonobj.requestString.dateOfBirth = DoB;
	jsonobj.requestString.passwordValue = otp;
    jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.userAgent = navigator.userAgent;
	return jsonobj;
}
function cifotpValidationJsonRequest(phoneNumber, dateOfBirth, otp){
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.mobileNumber = phoneNumber;
    jsonobj.requestString.dateOfBirth = dateOfBirth;
    jsonobj.requestString.passwordValue = otp;
    jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.userAgent = navigator.userAgent;
	return jsonobj;
}

function subProduct(productId,incomeDetails,age,gender,occupation,branchId){

    var jsonReqObj = {};
    jsonReqObj.requestString = {};
    jsonReqObj.requestString.productId = productId;
    jsonReqObj.requestString.income = incomeDetails;
    jsonReqObj.requestString.age = age;
    jsonReqObj.requestString.gender = gender;
    jsonReqObj.requestString.occupation = occupation;
    jsonReqObj.requestString.branchId = branchId;
	return jsonReqObj;
}


function panValidationJSONRequest(phoneNumber, panNumber, AadharName, nameMatch, DoB){   
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.panNumber = panNumber;
    jsonobj.requestString.mobileNumber = phoneNumber;
    jsonobj.requestString.aadharName = AadharName;
    jsonobj.requestString.nameMatch = nameMatch;
	jsonobj.requestString.Existing_Customer = currentFormContext.existingCustomer;
    jsonobj.requestString.identifierValue = DoB;
    jsonobj.requestString.identifierName = "DOB"
	jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.userAgent = navigator.userAgent;
	return jsonobj;
}


function signzyEmailJSONRequest(firstName, lastName, emailId, employerName){
    
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.firstName = firstName;
	jsonobj.requestString.lastName = lastName;
    jsonobj.requestString.emailId = emailId;
	jsonobj.requestString.employerName = employerName;
    jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.Idtokenjwt = currentFormContext.Idtokenjwt;
	return jsonobj;
}
function aadharEKycVerification(/*firstName, lastName, emailID, employerName*/){
	var jsonobj = {};
    jsonobj.requestString = {};
	jsonobj.requestString.mobileNumber = "adobe";
    jsonobj.requestString.journeyID = currentFormContext.journeyID;
	jsonobj.requestString.journeyName = currentFormContext.journeyName;
    jsonobj.requestString.Idtokenjwt = currentFormContext.Idtokenjwt;
	return jsonobj;
}

function paymentGatewayJSONRequest(mobileNumber, amount, attemptNo, customerName) {
    var jsonObj = {};
	jsonObj.journeyName = currentFormContext.journeyName;
	jsonObj.pseudoID = "PseudoCASAPLA2ATesting2";//currentFormContext.pseudoID;
	jsonObj.orderId = currentFormContext.leadNumber + "_" + attemptNo;
	jsonObj.amount = amount;
	jsonObj.formRedirectURL = currentFormContext.formRedirectURL;//"/content/forms/af/hdfc/hdfc_savings_forms/forms/insta_savings/instasavingsform.html?wcmmode=disabled&dataRef=service://HDFCFormsDefaultPrefillService/";
	jsonObj.mobileNumber = mobileNumber;
	jsonObj.currency = "INR";
	jsonObj.userAgent = navigator.userAgent;
	jsonObj.journeyId = currentFormContext.journeyID;
	jsonObj.leadNumber = currentFormContext.leadNumber;
    jsonObj.customerName = customerName;
	jsonObj.billingAddress = {};
	jsonObj.billingAddress.address = "";
	jsonObj.billingAddress.city = "";
	jsonObj.billingAddress.state = "";
	jsonObj.billingAddress.zip = "";
	jsonObj.billingAddress.country = ""
	jsonObj.deliveryAddress = {};
	jsonObj.deliveryAddress.address = "";
	jsonObj.deliveryAddress.city = "";
	jsonObj.deliveryAddress.state = "";
	jsonObj.deliveryAddress.zip = "";
	jsonObj.deliveryAddress.country = "IND";
	jsonObj.merchantParam = {};
	jsonObj.merchantParam.mParam1 = currentFormContext.leadNumber;
	jsonObj.merchantParam.mParam2 = "";
	jsonObj.merchantParam.mParam3 = currentFormContext.journeyID;
	jsonObj.merchantParam.mParam4 = currentFormContext.journeyName;
	jsonObj.merchantParam.mParam5 = "";
    return jsonObj;
}


function aadharOneJSONRequest(mobileNumber, DoB) {
    var jsonObj = {};
    jsonObj.requestString = {};

    var transaction_Id = currentFormContext.journeyID.replace(/-/g, '').replace(/_/g, '');
    jsonObj.requestString.initParameters = {};
    jsonObj.requestString.initParameters.journeyId = currentFormContext.journeyID;
    jsonObj.requestString.initParameters.transactionId = transaction_Id;
    jsonObj.requestString.initParameters.journeyName = currentFormContext.journeyName;
    jsonObj.requestString.initParameters.userAgent = window.navigator.userAgent;
    jsonObj.requestString.initParameters.mobileNumber = mobileNumber;
    jsonObj.requestString.initParameters.pseudoID = currentFormContext.pseudoID;
    jsonObj.requestString.initParameters.leadNumber = currentFormContext.leadNumber;
    jsonObj.requestString.initParameters.leadProfileId = currentFormContext.leadProfileId.toString();
    jsonObj.requestString.initParameters.additionalParam1 = "";
    jsonObj.requestString.initParameters.additionalParam2 = "";
    jsonObj.requestString.initParameters.identifierValue = DoB;
    jsonObj.requestString.initParameters.identifierName = "DOB";

    jsonObj.requestString.auth = {};
    jsonObj.requestString.existingCustomer = currentFormContext.existingCustomer;
    jsonObj.requestString.auth.journey_key = currentFormContext.journeyID;
    jsonObj.requestString.auth.service_code = "XX2571ER";
    jsonObj.requestString.data_otp_gen = {};
    jsonObj.requestString.data_otp_gen.UID_NO = "";

    jsonObj.requestString.data_app = {}
    jsonObj.requestString.data_app.journey_id = currentFormContext.journeyID;
    jsonObj.requestString.data_app.lead_profile_id = currentFormContext.leadProfileId.toString();
    jsonObj.requestString.data_app.callback = "/content/hdfc_savings_forms/api/aadharCallback";
    jsonObj.requestString.data_app.lead_profile = {};
    jsonObj.requestString.data_app.lead_profile.leadProfileId = currentFormContext.leadProfileId.toString();
    jsonObj.requestString.data_app.lead_profile.mobileNumber = mobileNumber;
    jsonObj.requestString.data_app.lead_profile.Addresses = "";
    jsonObj.requestString.data_app.journeyStateInfo = {};
    jsonObj.requestString.data_app.journeyStateInfo.state = "CUSTOMER_AADHAR_VALIDATION";
    jsonObj.requestString.data_app.journeyStateInfo.stateInfo = currentFormContext.schemaName; //JSON.stringify(stateInfo.afData.afBoundData.data[currentFormContext.schemaName]);
    jsonObj.requestString.data_app.journeyStateInfo.formData = getFormData();
    jsonObj.requestString.data_app.auditData = {};
    jsonObj.requestString.data_app.auditData.action = "CUSTOMER_AADHAR_VALIDATION";
    jsonObj.requestString.data_app.auditData.auditType = "Regulatory";

    jsonObj.requestString.client_info = {};
    jsonObj.requestString.client_info.browser = get_browser();
    jsonObj.requestString.client_info.browser.majver = "";

    jsonObj.requestString.client_info.cookie = {};
    jsonObj.requestString.client_info.cookie.source = "AdobeForms";
    jsonObj.requestString.client_info.cookie.name = "InstaSavings";
    jsonObj.requestString.client_info.cookie.ProductShortname = "IS";
    jsonObj.requestString.client_info.client_ip = "";
    jsonObj.requestString.client_info.device = {};
    jsonObj.requestString.client_info.device.type = get_device();
    jsonObj.requestString.client_info.device.name = "Samsung G5";
    jsonObj.requestString.client_info.device.os = get_OS();
    jsonObj.requestString.client_info.device.os_ver = "637.38383";//get_OSVer();
    jsonObj.requestString.client_info.isp = {};
    jsonObj.requestString.client_info.isp.ip = "839.893.89.89";
    jsonObj.requestString.client_info.isp.provider = "AirTel";
    jsonObj.requestString.client_info.isp.city = "Mumbai";
    jsonObj.requestString.client_info.isp.state = "Maharashrta";
    jsonObj.requestString.client_info.isp.pincode = "400828";
    jsonObj.requestString.client_info.geo = {};
    jsonObj.requestString.client_info.geo.lat = "72.8777° E";
    jsonObj.requestString.client_info.geo.long = "19.0760° N";

    jsonObj.requestString.data_app.filler1 = "filler1";
    jsonObj.requestString.data_app.filler2 = "filler2";
    jsonObj.requestString.data_app.filler3 = "filler3";
    jsonObj.requestString.data_app.filler4 = "filler4";
    jsonObj.requestString.data_app.filler5 = "filler5";
    jsonObj.requestString.data_app.filler6 = "filler6";
    jsonObj.requestString.data_app.filler7 = "filler7";
    jsonObj.requestString.data_app.filler8 = "filler8";
    jsonObj.requestString.data_app.filler9 = "filler9";
    jsonObj.requestString.data_app.filler10 = "filler10";
    return jsonObj;
}


function leadGenerationJSONRequest(imageUploadResponseObj) {
    var jsonObj = {};
    jsonObj.requestString = {};
    var FormData = {};
    FormData.data = JSON.parse(getFormData());
    jsonObj.requestString.journeyID = currentFormContext.journeyID;
    jsonObj.requestString.journeyName = "Document Upload";
    jsonObj.requestString.userAgent = navigator.userAgent;
    jsonObj.requestString.imageUploadResponse = imageUploadResponseObj;
    return jsonObj;
}


function showErrorPopup(msgText) {

    var y = document.getElementById("err-popup-subheader");
    y.innerHTML = msgText;

    $("#myModal .cmp-modal__content-container").css("text-align", "center");
    $("#myModal .cmp-modal__horizontal-flex").css("display", "block");
    $("#myModal").css("display", "block");
    $('#err-popup-buttonText').on('click', function () {
        $("#myModal").css("display", "none");
    });

}

function showErrorMessage(flag, id, message) {
    if (flag) {
        $(id).css("display", "block");
        $(id).text(message);
        $(id).css('visibility', 'visible');
    } else {
        $(id).css("display", "none");
        $(id).text('');
        $(id).css('visibility', 'hidden');
    }
}

function showInlineErrorMessage(flag, objectId, message){
	id = "#" + $("#" + objectId + " .guideFieldError").attr('id');
    if (flag) {
        $(id).css("display", "block");
        $(id).text(message);
        $(id).css('visibility', 'visible');
    } else {
        $(id).css("display", "none");
        $(id).text('');
        $(id).css('visibility', 'hidden');
    }
}

function getErrorCode(errorObj, errorContext){
	if(errorContext!==undefined && errorContext!=="")
		return errorObj!==undefined ? errorObj.status!==undefined && errorObj.status!== "" && errorObj.status!==null? errorContext + "-" + errorObj.status.toString() : errorContext + "-" + "HTTP_ERROR" : errorContext + "-" + "HTTP_ERROR";
	else
        return errorObj!==undefined ? errorObj.status!==undefined && errorObj.status!== "" && errorObj.status!==null? errorObj.status.toString() : "HTTP_ERROR" : "HTTP_ERROR";
}


function showAPIInvocationError(errorMsg) {

    var savingspanel = guideBridge.resolveNode("guide[0].guide1[0].guideRootPanel[0].SavingsInfopanel[0].SavingsForm[0]");
	var errorPanel = guideBridge.resolveNode("guide[0].guide1[0].guideRootPanel[0].SavingsInfopanel[0].errorContainer[0].errorpanel[0]");
	savingspanel.visible = false;
	errorPanel.visible = true;
    errorPanel.errordetailspanel.Error.errorText.value = errorMsg;

	setTimeout(function () {
		//Analytics call
		currentFormContext.errorMessage = errorMsg;
		setPageDetails("Insta Savings", "Error Page", null);
	}, 1000);
    $('.cmp-banner-section').css('display', 'none');
}


function getServerTime(dateFormat, timeZone) {
    var uri = "/content/hdfc_commonforms/api/currentDateTime.json";
    var jsonobj = {};
    jsonobj.requestString = {};
    jsonobj.requestString.timezone = timeZone;
    jsonobj.requestString.dateFormat = dateFormat;
    var date = "";
    $.ajax({
        url: uri,
        type: "POST",
        async: false,
        cache: false,
        data: JSON.stringify(jsonobj),
        contentType: 'application/json',
        dataType: "json",
        success: function (data) {
            date = data.currentDateTime;
        },
        error: function (errorObj) {
            //currentFormContext.errorCode = errorObj!==undefined ? errorObj.status!==undefined && errorObj.status!== "" && errorObj.status!==null? errorObj.status.toString() : "HTTP_ERROR" : "HTTP_ERROR";
            //showAPIInvocationError("Your request could not be processed, Please try again to continue.");
        }
    });
    return date;
}

function get_browser() {
    var ua=navigator.userAgent,tem,M=ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || []; 
    if(/trident/i.test(M[1])){
        tem=/\brv[ :]+(\d+)/g.exec(ua) || []; 
        return {name:'IE',version:(tem[1]||'')};
        }   
    if(M[1]==='Chrome'){
        tem=ua.match(/\bOPR|Edge\/(\d+)/)
        if(tem!=null)   {return {name:'Opera', version:tem[1]};}
        }   
    M=M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];
    if((tem=ua.match(/version\/(\d+)/i))!=null) {M.splice(1,1,tem[1]);}
    return {
      name: M[0],
      version: M[1] 
    };
 }

function get_OS() {
  var userAgent = window.navigator.userAgent,
      platform = window.navigator.platform,
      macosPlatforms = ['Macintosh', 'MacIntel', 'MacPPC', 'Mac68K'],
      windowsPlatforms = ['Win32', 'Win64', 'Windows', 'WinCE'],
      iosPlatforms = ['iPhone', 'iPad', 'iPod'],
      os = null;

  if (macosPlatforms.indexOf(platform) !== -1) {
    os = 'Mac OS';
  } else if (iosPlatforms.indexOf(platform) !== -1) {
    os = 'iOS';
  } else if (windowsPlatforms.indexOf(platform) !== -1) {
    os = 'Windows';
  } else if (/Android/.test(userAgent)) {
    os = 'Android';
  } else if (!os && /Linux/.test(platform)) {
    os = 'Linux';
  }

  return os;
}

function get_device() {
    if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
        return "mobile";
    } else {
        return "desktop";
    }
}

function get_OSVer() {
    var OSName = "Unknown";
    if (window.navigator.userAgent.indexOf("Windows NT 10.0") != -1)
        OSName = "Windows 10";
    if (window.navigator.userAgent.indexOf("Windows NT 6.2") != -1)
        OSName = "Windows 8";
    if (window.navigator.userAgent.indexOf("Windows NT 6.1") != -1)
        OSName = "Windows 7";
    if (window.navigator.userAgent.indexOf("Windows NT 6.0") != -1)
        OSName = "Windows Vista";
    if (window.navigator.userAgent.indexOf("Windows NT 5.1") != -1)
        OSName = "Windows XP";
    if (window.navigator.userAgent.indexOf("Windows NT 5.0") != -1)
        OSName = "Windows 2000";
    if (window.navigator.userAgent.indexOf("Mac") != -1)
        OSName = "Mac/iOS";
    if (window.navigator.userAgent.indexOf("X11") != -1)
        OSName = "UNIX";
    if (window.navigator.userAgent.indexOf("Linux") != -1)
        OSName = "Linux";
    return OSName;
}



function getCurentDateTime(){
   var currentdate = new Date();
return (currentdate.getMonth() + 1) + "/"
     + currentdate.getDate() + "/"
    + currentdate.getFullYear() + " " + new Date().toLocaleTimeString('en-US');
}

function getAPIDateFormat(date, separator){
	return  ((date.getDate() > 9) ? date.getDate() : ('0' + date.getDate())) + separator + ((date.getMonth() > 8) ? (date.getMonth() + 1) : ('0' + (date.getMonth() + 1))) + separator + date.getFullYear();
}

function updateTopContainer(title, welcomeText, name, sectionHeader, subSectionHeader) {
    if (title != "" || title != null)
        $('#top-title').text(title);
    else
        $('#top-title').text("");
    if (welcomeText != "" || welcomeText != null)
        $('#welcomeText').text(welcomeText);
    else
        $('#welcomeText').text("");
    if (name != "" || name !== null)
        $('#verifiedCustName').text(name);
    else
        $('#verifiedCustName').text("");
    if (sectionHeader != "" || sectionHeader != null)
        $('#sectionHeader').text(sectionHeader);
    else
        $('#sectionHeader').text("");
    if (subSectionHeader != "" || subSectionHeader != null)
        $('#subSectionHeader').text(subSectionHeader);
    else
        $('#subSectionHeader').text("");
}

function getCookie(cName) {
    const name = cName + "=";
    const cDecoded = decodeURIComponent(document.cookie);
    var cArr = cDecoded.split('; ');
    var res;
    for (var i = 0; i < cArr.length; i++) {
        if (cArr[i].indexOf(name) === 0) {
            res = cArr[i].substring(name.length);
            break;
        }
    }
    return res;
}

function sendRequest(jsonResponseObj, redirectForm) {
    for (var key in jsonResponseObj) {
        var value = jsonResponseObj[key];
        updateFormElement(redirectForm, key, jsonResponseObj[key]);
    }
    redirectForm.appendTo('body');
    redirectForm.submit();
}

function updateFormElement(form, key, value) {
    var field = $('<input></input>');
    field.attr("type", "hidden");
    field.attr("name", key);
    field.attr("value", value);
    form.append(field);
}
function undefinedCheck(inputObject) {
    if (typeof inputObject === 'undefined') {
        return false;
    } else {
        return true;
    }
}

function showTopImage(flag){
    if(flag){
		$("#guideContainer-rootPanel-savings-panel-savingsForm___layoutContainer .clearfix").css("display","block");
    }else if(!flag){
		$("#guideContainer-rootPanel-savings-panel-savingsForm___layoutContainer .clearfix").css("display","none");
    }
}

function getAge(birthday) { // birthday is a date
    var bDate = new Date(birthday);
    var ageDifMs = Date.now() - bDate.getTime();
    var ageDate = new Date(ageDifMs); // miliseconds from epoch
    return Math.abs(ageDate.getUTCFullYear() - 1970);
}
function hidesupportLink(){
    $('#saveForLater').css('display','none');
	$('#contactSupport').css('display','none');
}


function savedDataRequestJson(mobileNumber, dobValue) {

    var jsonobj = {};
    jsonobj.RequestPayload = {};
    jsonobj.RequestPayload.journeyName = currentFormContext.journeyName;
    jsonobj.RequestPayload.mobileNumber = mobileNumber;
    jsonobj.RequestPayload.currentJourneyID = currentFormContext.journeyID;
    jsonobj.RequestPayload.userAgent = window.navigator.userAgent;
    jsonobj.RequestPayload.profile = {};
   /* if(dobValue !== null){
        var arr = [];
		arr = dobValue.split('/');
		dobValue = arr[2] + "-" + arr[1] + "-" + arr[0];
    }*/
    jsonobj.RequestPayload.profile.dob = dobValue;
    return jsonobj;
}

function scrollToTop() {
    setTimeout(function () {
        $(this).scrollTop(0);
    }, 0);
}
function getInputBoxID(object){
	return $("#" + object.id + " input").attr('id');
}
function addClass(flag, className){
    if(flag)
        $("."+className).addClass("red-bottom");
   	if(!flag)
		$("."+className).removeClass("red-bottom");
}

function addClassByID(flag, id){
    if(flag)
        $("#"+id).addClass("red-bottom");
   	if(!flag)
		$("#"+id).removeClass("red-bottom");
}

function setRedBorder(object, flag){
    if(object.value!==null)
        $("#"+object.id).removeClass("red-bottom");
    else 
        $("#"+object.id).addClass("red-bottom");
    if(flag!==undefined){
        if(flag)
        	$("#"+object.id).addClass("red-bottom");
   		if(!flag)
			$("#"+object.id).removeClass("red-bottom");
    }
}

function setRedBorderDate(object){
    if($("#"+object.id+" .comb-form-group-day").val() === "" || $("#"+object.id+" .comb-form-group-month").val() === "" || $("#"+object.id+" .comb-form-group-year").val() === ""){
		$("#"+object.id).addClass("red-bottom");
        return false;
    } else {
		$("#"+object.id).removeClass("red-bottom");
        return true;
    }
}

/***** THIS IS FOR InstaSavings Form *****/
function startAnalytics(){

    $('.cmp-header__items .cmp-logo-link').click(function() {
        setButtonDetails("HDFC Logo", "Link", "Header", "event");
    });

    $('.cmp-header__items .cmp-locate-us-link').click(function() {
        setButtonDetails("Locate Us", "Link", "Header", "event");
    });

    $('.cmp-header__items .cmp-help-link').click(function() {
        setButtonDetails("Help", "Link", "Header", "event");
    });
    
    $('.cmp-footer__items .cmp-contact-support-link').click(function() {
        setButtonDetails("Contact Support", "Link", "Footer", "event");
    });

    $('.cmp-rating .cmp-rating__submit-btn').on('click', function() { 
        setEventDetails(null, null, ratingValue);
        setButtonDetails("Submit", "Button", "Survey", "survey");
    });	
}

function setPageDetails(formName, pageName, panel) {

    digitalData = {
        form: {
            name: formName
        },
        page: {
            pageInfo: {
                pageName: pageName,
                errorMessage: currentFormContext.errorMessage,
                errorCode: currentFormContext.errorCode
            }
        },
        formDetails: {},
        link: {},
        event: {},
        assisted: {},
        user: {}
    };

    if (null != panel && panel.name == "CustomerProfile") {
        setCustomerProfileAccountVariantsOnPageLoad(panel);
    } else if (null != panel && panel.name == "Success") {
        successOnPageLoad(panel);
    }

    setUserDetails();
    try {
        _satellite.track('pageload');
    } catch (err) {
        console.error(err);
    }
}


function setButtonDetails(linkName, linkType, linkPosition, param) {

    currentFormContext.journeyState = "";
    setUserDetails();

    if (param == "survey") {
        currentFormContext.journeyState = "CUSTOMER_FEEDBACK_CAPTURED";
        setUserDetails();
    }

    digitalData['link'] = {
        linkName: linkName,
        linkType: linkType,
        linkPosition: linkPosition
    };

    try {
        _satellite.track(param);
    } catch (err) {
        console.error(err);
    }
}


function setEventDetails(status, phone, rating) {

    var encryptedPhone = null;

    if (phone != null) {
        encryptedPhone = sha256(phone.toString());
    }

    digitalData['event'] = {
        status: status,
        phone: encryptedPhone,
        rating: rating
    };
}


function setUserDetails() {
    digitalData['user'] = {
        casa: currentFormContext.casaUser,
        aan: currentFormContext.aanNumber,
        journeyID: currentFormContext.journeyID,
        journeyName: currentFormContext.journeyName,
        journeyState: currentFormContext.journeyState,
        gender: currentFormContext.genderType
    };
}

//var rootNode = guideBridge.resolveNode("guide.guide1.guideRootPanel.

function setAssistedDetails(panel){
    var assistedFlag = panel.personalInfo.helpedByHDFCBankEmployee.value == 1 ? "Yes" : "No";
    var lgCode = panel.personalInfo.LGandLCSection.LGandLC.LG.value;
    var lcCode = panel.personalInfo.LGandLCSection.LGandLC.LC.value;

     digitalData['assisted']={
            flag: assistedFlag,
            lg: lgCode,
            lc: lcCode
        };
}

function selectKYC(panel) {
    var passPort_Value = panel.useOtherDocumentKYC.panel_19346213581609312674133.panel1609313301637.chkPassport.value;
    var drivingLicense_Value = panel.useOtherDocumentKYC.panel_19346213581609312674133.panel1609313301637_copy_1.chkDrivingLicense.value;
    var voter_ID = panel.useOtherDocumentKYC.panel_19346213581609312674133.panel1609313301637_copy_2.chkVoterID.value;
    //SelectKYC
    var kycDocumentType = "Aadhaar Card";
    if (panel.KYCChoice.value == "OtherDocumentKYC") {
        if (passPort_Value != null && passPort_Value != "") {
            kycDocumentType = passPort_Value;
        } else if (drivingLicense_Value != null && drivingLicense_Value != "") {
            kycDocumentType = drivingLicense_Value;
        } else if (voter_ID != null && voter_ID != "") {
            kycDocumentType = voter_ID;
        }
        
    }
    digitalData['formDetails'] = {
        kycType: kycDocumentType,
        //aadhaarType: 
    }

}

function setContactDetails(panel) {
    digitalData['formDetails'] = {
        //ContactDetails
        //residenceType: panel.currentAddressDetails.residenceDetails.pnlResidancePanel.residenceType1.displayValue,
        //residenceStatus: panel.currentAddressDetails.residenceDetails.pnlResidancePanel.residenceType2.displayValue,
        //taxAddress: panel.currentAddressDetails.residenceDetails.taxPurposePanel.isTaxAddress.value == 1 ? "Yes" : "No",
        state : panel.currentAddressDetails.accountBranch.pnlBranchCity.branchState.displayValue,
        city : panel.currentAddressDetails.accountBranch.pnlBranchCity.branchCity.displayValue,
        bankBranch: panel.currentAddressDetails.accountBranch.hdfcBankBranch.displayValue
    }
}

function setCustomerProfile(panel) {
	var accType = panel.indivifualAccountType.selectAccountType.value;
    var accTypeText = "";
    if (accType == 4) {
		accTypeText = "Savings";
    } else if (accType == 5) {
		accTypeText = "Current";
    } else if (accType == 6) {
		accTypeText = "Corporate Salary";
    }


    digitalData['formDetails'] = {
        accountType: accTypeText,
        employmentType: panel.indivifualAccountType.financialProfileInfo.pnlRow1.employmentType.displayValue,
        AnnualIncome: panel.indivifualAccountType.financialProfileInfo.pnlRow1.txtAnnualIncome.value,
        fundsSource: panel.indivifualAccountType.financialProfileInfo.pnlRow1.sourceOfFunds.displayValue,
        taxResident: panel.indivifualAccountType.pnlIndianOrTaxResident.chkIsTaxResident.value == 1 ? "Yes" : "No"
    }
}

function setCustomerProfileAccountVariantsOnPageLoad(panel) {
    digitalData['formDetails'] = {
        variantRecommended: panel.pnlAccountvariantUserProfile.hiddenAccountVariant.value,
        variantRecommendedAMB: panel.pnlAccountvariantUserProfile.hiddenAccountVariantAMB.value
    }
}

function setCustomerProfileAccountVariants(panel) {
    digitalData['formDetails'] = {
        variantSelected: panel.pnlAccountvariantUserProfile.hiddenAccountVariant.value,
        variantSelectedAMB: panel.pnlAccountvariantUserProfile.hiddenAccountVariantAMB.value
    }
}

function personalInfoDetails(panel) {
    var marital_Status = panel.YourMaritalStatus.maritalStatus.value == 0 ? "Single" : "Married";
    digitalData['formDetails'] = {
        maritalStatus: marital_Status,
        nomineeSelected: panel.personalInfo.nomineeDeclaration.value == 1 ? "Yes" : "No",
        nomineeRelation: panel.personalInfo.newNomineeDetails.Relationship.RelationandText.relationWithYou.displayValue,
        thirdPartyTransfers: panel.personalInfo.Cheboxgroup.registerAccount.value == 1 ? "Yes" : "No",
        emailStatement: panel.personalInfo.Cheboxgroup.applyForEmailStatement.value == 0 ? "Yes" : "No"
    }
}

function kycDetails(panel) {
    digitalData['formDetails'] = {
        //KYCVerificationMethod:
        //KYCDocument: panel.docUploadP.docUpload.pan-address-container.pancardUploadSection.pan-card-wrappers.kyc-document-panel.KYCDocumentOpt.value,
        //IDProof: panel.docUploadP.docUpload.pan-address-container.pancardUploadSection.ID-Proof-Section.address-proof-section.IDProofOpt.value
    }
}

function successOnPageLoad(panel) {
	var accNum = panel.pnlAccountConfirmation.AccountOpeningPanel.accountNumber.value;
    var isVideoKycPanelvisible = panel.pnlAccountConfirmation.completeVideoKYCPanel.visible ? "Yes" : "No";
    var isFunding_Eligible = panel.pnlAccountConfirmation.pnlAddMoney.visible ? "Yes" : "No";


    digitalData['formDetails'] = {
        isAccount: accNum != null && accNum != "" ? "Yes" : "No",
        isVideoKYC: isVideoKycPanelvisible,
        isFundingEligible: isFunding_Eligible,
        reference: panel.pnlAccountConfirmation.applicationSubmissionPanel.leadReferenceNumber.value
    }
}

function addMoneyDetails(panel) {
    var addMoneyAmout = panel.pnlAccountConfirmation.pnlAddMoney.addMoneyPanel.amountOptions.value;
    var addMoneyAmoutValue = "";
    if (addMoneyAmout == "5000") {
		addMoneyAmoutValue = "₹ 5000";
    } else if (addMoneyAmout == "10000") {
		addMoneyAmoutValue = "₹ 10000";
    } else if (addMoneyAmout == "25000") {
		addMoneyAmoutValue = "₹ 25000";
    } else if (addMoneyAmout == "50000") {
		addMoneyAmoutValue = "₹ 50000";
    }

    digitalData['formDetails'] = {
        Amount: addMoneyAmoutValue
    }
}

function fundingStatus(isFunding_Success, panel) {
    var isVideoKycPanelvisible = panel.pnlAccountConfirmation.completeVideoKYCPanel.visible ? "Yes" : "No";
    digitalData['formDetails'] = {
        isFundingSuccess: isFunding_Success,
        isVideoKYC: isVideoKycPanelvisible
    }
}



(function () {
  'use strict';

  var ERROR = 'input is invalid type';
  var WINDOW = typeof window === 'object';
  var root = WINDOW ? window : {};
  if (root.JS_SHA256_NO_WINDOW) {
    WINDOW = false;
  }
  var WEB_WORKER = !WINDOW && typeof self === 'object';
  var NODE_JS = !root.JS_SHA256_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
  if (NODE_JS) {
    root = global;
  } else if (WEB_WORKER) {
    root = self;
  }
  var COMMON_JS = !root.JS_SHA256_NO_COMMON_JS && typeof module === 'object' && module.exports;
  var AMD = typeof define === 'function' && define.amd;
  var ARRAY_BUFFER = !root.JS_SHA256_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
  var HEX_CHARS = '0123456789abcdef'.split('');
  var EXTRA = [-2147483648, 8388608, 32768, 128];
  var SHIFT = [24, 16, 8, 0];
  var K = [
    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
  ];
  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'arrayBuffer'];

  var blocks = [];

  if (root.JS_SHA256_NO_NODE_JS || !Array.isArray) {
    Array.isArray = function (obj) {
      return Object.prototype.toString.call(obj) === '[object Array]';
    };
  }

  if (ARRAY_BUFFER && (root.JS_SHA256_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
    ArrayBuffer.isView = function (obj) {
      return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
  }

  var createOutputMethod = function (outputType, is224) {
    return function (message) {
      return new Sha256(is224, true).update(message)[outputType]();
    };
  };

  var createMethod = function (is224) {
    var method = createOutputMethod('hex', is224);
    if (NODE_JS) {
      method = nodeWrap(method, is224);
    }
    method.create = function () {
      return new Sha256(is224);
    };
    method.update = function (message) {
      return method.create().update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createOutputMethod(type, is224);
    }
    return method;
  };

  var nodeWrap = function (method, is224) {
    var crypto = eval("require('crypto')");
    var Buffer = eval("require('buffer').Buffer");
    var algorithm = is224 ? 'sha224' : 'sha256';
    var nodeMethod = function (message) {
      if (typeof message === 'string') {
        return crypto.createHash(algorithm).update(message, 'utf8').digest('hex');
      } else {
        if (message === null || message === undefined) {
          throw new Error(ERROR);
        } else if (message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        }
      }
      if (Array.isArray(message) || ArrayBuffer.isView(message) ||
        message.constructor === Buffer) {
        return crypto.createHash(algorithm).update(new Buffer(message)).digest('hex');
      } else {
        return method(message);
      }
    };
    return nodeMethod;
  };

  var createHmacOutputMethod = function (outputType, is224) {
    return function (key, message) {
      return new HmacSha256(key, is224, true).update(message)[outputType]();
    };
  };

  var createHmacMethod = function (is224) {
    var method = createHmacOutputMethod('hex', is224);
    method.create = function (key) {
      return new HmacSha256(key, is224);
    };
    method.update = function (key, message) {
      return method.create(key).update(message);
    };
    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {
      var type = OUTPUT_TYPES[i];
      method[type] = createHmacOutputMethod(type, is224);
    }
    return method;
  };

  function Sha256(is224, sharedMemory) {
    if (sharedMemory) {
      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      this.blocks = blocks;
    } else {
      this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    }

    if (is224) {
      this.h0 = 0xc1059ed8;
      this.h1 = 0x367cd507;
      this.h2 = 0x3070dd17;
      this.h3 = 0xf70e5939;
      this.h4 = 0xffc00b31;
      this.h5 = 0x68581511;
      this.h6 = 0x64f98fa7;
      this.h7 = 0xbefa4fa4;
    } else { // 256
      this.h0 = 0x6a09e667;
      this.h1 = 0xbb67ae85;
      this.h2 = 0x3c6ef372;
      this.h3 = 0xa54ff53a;
      this.h4 = 0x510e527f;
      this.h5 = 0x9b05688c;
      this.h6 = 0x1f83d9ab;
      this.h7 = 0x5be0cd19;
    }

    this.block = this.start = this.bytes = this.hBytes = 0;
    this.finalized = this.hashed = false;
    this.first = true;
    this.is224 = is224;
  }

  Sha256.prototype.update = function (message) {
    if (this.finalized) {
      return;
    }
    var notString, type = typeof message;
    if (type !== 'string') {
      if (type === 'object') {
        if (message === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
          message = new Uint8Array(message);
        } else if (!Array.isArray(message)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
      notString = true;
    }
    var code, index = 0, i, length = message.length, blocks = this.blocks;

    while (index < length) {
      if (this.hashed) {
        this.hashed = false;
        blocks[0] = this.block;
        blocks[16] = blocks[1] = blocks[2] = blocks[3] =
          blocks[4] = blocks[5] = blocks[6] = blocks[7] =
          blocks[8] = blocks[9] = blocks[10] = blocks[11] =
          blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
      }

      if (notString) {
        for (i = this.start; index < length && i < 64; ++index) {
          blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];
        }
      } else {
        for (i = this.start; index < length && i < 64; ++index) {
          code = message.charCodeAt(index);
          if (code < 0x80) {
            blocks[i >> 2] |= code << SHIFT[i++ & 3];
          } else if (code < 0x800) {
            blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else if (code < 0xd800 || code >= 0xe000) {
            blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          } else {
            code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));
            blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];
            blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];
          }
        }
      }

      this.lastByteIndex = i;
      this.bytes += i - this.start;
      if (i >= 64) {
        this.block = blocks[16];
        this.start = i - 64;
        this.hash();
        this.hashed = true;
      } else {
        this.start = i;
      }
    }
    if (this.bytes > 4294967295) {
      this.hBytes += this.bytes / 4294967296 << 0;
      this.bytes = this.bytes % 4294967296;
    }
    return this;
  };

  Sha256.prototype.finalize = function () {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    var blocks = this.blocks, i = this.lastByteIndex;
    blocks[16] = this.block;
    blocks[i >> 2] |= EXTRA[i & 3];
    this.block = blocks[16];
    if (i >= 56) {
      if (!this.hashed) {
        this.hash();
      }
      blocks[0] = this.block;
      blocks[16] = blocks[1] = blocks[2] = blocks[3] =
        blocks[4] = blocks[5] = blocks[6] = blocks[7] =
        blocks[8] = blocks[9] = blocks[10] = blocks[11] =
        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
    }
    blocks[14] = this.hBytes << 3 | this.bytes >>> 29;
    blocks[15] = this.bytes << 3;
    this.hash();
  };

  Sha256.prototype.hash = function () {
    var a = this.h0, b = this.h1, c = this.h2, d = this.h3, e = this.h4, f = this.h5, g = this.h6,
      h = this.h7, blocks = this.blocks, j, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;

    for (j = 16; j < 64; ++j) {
      // rightrotate
      t1 = blocks[j - 15];
      s0 = ((t1 >>> 7) | (t1 << 25)) ^ ((t1 >>> 18) | (t1 << 14)) ^ (t1 >>> 3);
      t1 = blocks[j - 2];
      s1 = ((t1 >>> 17) | (t1 << 15)) ^ ((t1 >>> 19) | (t1 << 13)) ^ (t1 >>> 10);
      blocks[j] = blocks[j - 16] + s0 + blocks[j - 7] + s1 << 0;
    }

    bc = b & c;
    for (j = 0; j < 64; j += 4) {
      if (this.first) {
        if (this.is224) {
          ab = 300032;
          t1 = blocks[0] - 1413257819;
          h = t1 - 150054599 << 0;
          d = t1 + 24177077 << 0;
        } else {
          ab = 704751109;
          t1 = blocks[0] - 210244248;
          h = t1 - 1521486534 << 0;
          d = t1 + 143694565 << 0;
        }
        this.first = false;
      } else {
        s0 = ((a >>> 2) | (a << 30)) ^ ((a >>> 13) | (a << 19)) ^ ((a >>> 22) | (a << 10));
        s1 = ((e >>> 6) | (e << 26)) ^ ((e >>> 11) | (e << 21)) ^ ((e >>> 25) | (e << 7));
        ab = a & b;
        maj = ab ^ (a & c) ^ bc;
        ch = (e & f) ^ (~e & g);
        t1 = h + s1 + ch + K[j] + blocks[j];
        t2 = s0 + maj;
        h = d + t1 << 0;
        d = t1 + t2 << 0;
      }
      s0 = ((d >>> 2) | (d << 30)) ^ ((d >>> 13) | (d << 19)) ^ ((d >>> 22) | (d << 10));
      s1 = ((h >>> 6) | (h << 26)) ^ ((h >>> 11) | (h << 21)) ^ ((h >>> 25) | (h << 7));
      da = d & a;
      maj = da ^ (d & b) ^ ab;
      ch = (h & e) ^ (~h & f);
      t1 = g + s1 + ch + K[j + 1] + blocks[j + 1];
      t2 = s0 + maj;
      g = c + t1 << 0;
      c = t1 + t2 << 0;
      s0 = ((c >>> 2) | (c << 30)) ^ ((c >>> 13) | (c << 19)) ^ ((c >>> 22) | (c << 10));
      s1 = ((g >>> 6) | (g << 26)) ^ ((g >>> 11) | (g << 21)) ^ ((g >>> 25) | (g << 7));
      cd = c & d;
      maj = cd ^ (c & a) ^ da;
      ch = (g & h) ^ (~g & e);
      t1 = f + s1 + ch + K[j + 2] + blocks[j + 2];
      t2 = s0 + maj;
      f = b + t1 << 0;
      b = t1 + t2 << 0;
      s0 = ((b >>> 2) | (b << 30)) ^ ((b >>> 13) | (b << 19)) ^ ((b >>> 22) | (b << 10));
      s1 = ((f >>> 6) | (f << 26)) ^ ((f >>> 11) | (f << 21)) ^ ((f >>> 25) | (f << 7));
      bc = b & c;
      maj = bc ^ (b & d) ^ cd;
      ch = (f & g) ^ (~f & h);
      t1 = e + s1 + ch + K[j + 3] + blocks[j + 3];
      t2 = s0 + maj;
      e = a + t1 << 0;
      a = t1 + t2 << 0;
    }

    this.h0 = this.h0 + a << 0;
    this.h1 = this.h1 + b << 0;
    this.h2 = this.h2 + c << 0;
    this.h3 = this.h3 + d << 0;
    this.h4 = this.h4 + e << 0;
    this.h5 = this.h5 + f << 0;
    this.h6 = this.h6 + g << 0;
    this.h7 = this.h7 + h << 0;
  };

  Sha256.prototype.hex = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var hex = HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +
      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +
      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +
      HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +
      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +
      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +
      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +
      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +
      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +
      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +
      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +
      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +
      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F] +
      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +
      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +
      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +
      HEX_CHARS[(h4 >> 28) & 0x0F] + HEX_CHARS[(h4 >> 24) & 0x0F] +
      HEX_CHARS[(h4 >> 20) & 0x0F] + HEX_CHARS[(h4 >> 16) & 0x0F] +
      HEX_CHARS[(h4 >> 12) & 0x0F] + HEX_CHARS[(h4 >> 8) & 0x0F] +
      HEX_CHARS[(h4 >> 4) & 0x0F] + HEX_CHARS[h4 & 0x0F] +
      HEX_CHARS[(h5 >> 28) & 0x0F] + HEX_CHARS[(h5 >> 24) & 0x0F] +
      HEX_CHARS[(h5 >> 20) & 0x0F] + HEX_CHARS[(h5 >> 16) & 0x0F] +
      HEX_CHARS[(h5 >> 12) & 0x0F] + HEX_CHARS[(h5 >> 8) & 0x0F] +
      HEX_CHARS[(h5 >> 4) & 0x0F] + HEX_CHARS[h5 & 0x0F] +
      HEX_CHARS[(h6 >> 28) & 0x0F] + HEX_CHARS[(h6 >> 24) & 0x0F] +
      HEX_CHARS[(h6 >> 20) & 0x0F] + HEX_CHARS[(h6 >> 16) & 0x0F] +
      HEX_CHARS[(h6 >> 12) & 0x0F] + HEX_CHARS[(h6 >> 8) & 0x0F] +
      HEX_CHARS[(h6 >> 4) & 0x0F] + HEX_CHARS[h6 & 0x0F];
    if (!this.is224) {
      hex += HEX_CHARS[(h7 >> 28) & 0x0F] + HEX_CHARS[(h7 >> 24) & 0x0F] +
        HEX_CHARS[(h7 >> 20) & 0x0F] + HEX_CHARS[(h7 >> 16) & 0x0F] +
        HEX_CHARS[(h7 >> 12) & 0x0F] + HEX_CHARS[(h7 >> 8) & 0x0F] +
        HEX_CHARS[(h7 >> 4) & 0x0F] + HEX_CHARS[h7 & 0x0F];
    }
    return hex;
  };

  Sha256.prototype.toString = Sha256.prototype.hex;

  Sha256.prototype.digest = function () {
    this.finalize();

    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5,
      h6 = this.h6, h7 = this.h7;

    var arr = [
      (h0 >> 24) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 8) & 0xFF, h0 & 0xFF,
      (h1 >> 24) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 8) & 0xFF, h1 & 0xFF,
      (h2 >> 24) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 8) & 0xFF, h2 & 0xFF,
      (h3 >> 24) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 8) & 0xFF, h3 & 0xFF,
      (h4 >> 24) & 0xFF, (h4 >> 16) & 0xFF, (h4 >> 8) & 0xFF, h4 & 0xFF,
      (h5 >> 24) & 0xFF, (h5 >> 16) & 0xFF, (h5 >> 8) & 0xFF, h5 & 0xFF,
      (h6 >> 24) & 0xFF, (h6 >> 16) & 0xFF, (h6 >> 8) & 0xFF, h6 & 0xFF
    ];
    if (!this.is224) {
      arr.push((h7 >> 24) & 0xFF, (h7 >> 16) & 0xFF, (h7 >> 8) & 0xFF, h7 & 0xFF);
    }
    return arr;
  };

  Sha256.prototype.array = Sha256.prototype.digest;

  Sha256.prototype.arrayBuffer = function () {
    this.finalize();

    var buffer = new ArrayBuffer(this.is224 ? 28 : 32);
    var dataView = new DataView(buffer);
    dataView.setUint32(0, this.h0);
    dataView.setUint32(4, this.h1);
    dataView.setUint32(8, this.h2);
    dataView.setUint32(12, this.h3);
    dataView.setUint32(16, this.h4);
    dataView.setUint32(20, this.h5);
    dataView.setUint32(24, this.h6);
    if (!this.is224) {
      dataView.setUint32(28, this.h7);
    }
    return buffer;
  };

  function HmacSha256(key, is224, sharedMemory) {
    var i, type = typeof key;
    if (type === 'string') {
      var bytes = [], length = key.length, index = 0, code;
      for (i = 0; i < length; ++i) {
        code = key.charCodeAt(i);
        if (code < 0x80) {
          bytes[index++] = code;
        } else if (code < 0x800) {
          bytes[index++] = (0xc0 | (code >> 6));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else if (code < 0xd800 || code >= 0xe000) {
          bytes[index++] = (0xe0 | (code >> 12));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        } else {
          code = 0x10000 + (((code & 0x3ff) << 10) | (key.charCodeAt(++i) & 0x3ff));
          bytes[index++] = (0xf0 | (code >> 18));
          bytes[index++] = (0x80 | ((code >> 12) & 0x3f));
          bytes[index++] = (0x80 | ((code >> 6) & 0x3f));
          bytes[index++] = (0x80 | (code & 0x3f));
        }
      }
      key = bytes;
    } else {
      if (type === 'object') {
        if (key === null) {
          throw new Error(ERROR);
        } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
          key = new Uint8Array(key);
        } else if (!Array.isArray(key)) {
          if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
            throw new Error(ERROR);
          }
        }
      } else {
        throw new Error(ERROR);
      }
    }

    if (key.length > 64) {
      key = (new Sha256(is224, true)).update(key).array();
    }

    var oKeyPad = [], iKeyPad = [];
    for (i = 0; i < 64; ++i) {
      var b = key[i] || 0;
      oKeyPad[i] = 0x5c ^ b;
      iKeyPad[i] = 0x36 ^ b;
    }

    Sha256.call(this, is224, sharedMemory);

    this.update(iKeyPad);
    this.oKeyPad = oKeyPad;
    this.inner = true;
    this.sharedMemory = sharedMemory;
  }
  HmacSha256.prototype = new Sha256();

  HmacSha256.prototype.finalize = function () {
    Sha256.prototype.finalize.call(this);
    if (this.inner) {
      this.inner = false;
      var innerHash = this.array();
      Sha256.call(this, this.is224, this.sharedMemory);
      this.update(this.oKeyPad);
      this.update(innerHash);
      Sha256.prototype.finalize.call(this);
    }
  };

  var exports = createMethod();
  exports.sha256 = exports;
  exports.sha224 = createMethod(true);
  exports.sha256.hmac = createHmacMethod();
  exports.sha224.hmac = createHmacMethod(true);

  if (COMMON_JS) {
    module.exports = exports;
  } else {
    root.sha256 = exports.sha256;
    root.sha224 = exports.sha224;
    if (AMD) {
      define(function () {
        return exports;
      });
    }
  }
})();
function getFormattedDate() {
	var tzoffset = (new Date()).getTimezoneOffset() * 60000;
	var localISOTime = (new Date(Date.now() - tzoffset)).toISOString();
	return localISOTime;

}

function journeyJsonRequest(phoneNumber, DoB, journeyID, journeyName, journeyState) {

	//For Analytics
	currentFormContext.journeyID = journeyID;
	currentFormContext.journeyName = journeyName;
	currentFormContext.journeyState = journeyState;
	currentFormContext.journeyJsonObject.RequestPayload = {};
    currentFormContext.journeyJsonObject.RequestPayload.userAgent = window.navigator.userAgent;
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile = {};
    currentFormContext.journeyJsonObject.RequestPayload.formData = {};
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.profile = {};
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.mobileNumber = phoneNumber;
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.profile.dob = DoB;//.substring(0, 4) + "-" + DoB.substring(4, 6) + "-" + DoB.substring(6, 8);
	currentFormContext.journeyJsonObject.RequestPayload.formData.journeyName = journeyName;
	currentFormContext.journeyJsonObject.RequestPayload.formData.journeyStateInfo = [];
	currentFormContext.journeyJsonObject.RequestPayload.formData.journeyStateInfo[0] = createJourneyStateObject("CUSTOMER_IDENTITY_ACQUIRED");
	currentFormContext.journeyJsonObject.RequestPayload.formData.journeyStateInfo[1] = createJourneyStateObject(journeyState);
	currentFormContext.journeyJsonObject.RequestPayload.formData.channel = "ADOBE WEBFORMS";
	currentFormContext.journeyJsonObject.RequestPayload.formData.journeyID = journeyID;
	return currentFormContext.journeyJsonObject;
}

function journeyParamJson(mobileNumber, leadProfileId, journeyID) {
	var jsonObj = {};
	jsonObj.RequestPayload = {};
	jsonObj.RequestPayload.leadProfile = {};
	jsonObj.RequestPayload.journeyInfo = {};

	jsonObj.RequestPayload.leadProfile.mobileNumber = mobileNumber;
	jsonObj.RequestPayload.journeyInfo.journeyID = journeyID;
    jsonObj.RequestPayload.journeyInfo.journeyName = currentFormContext.journeyName;
	return jsonObj;
}

function invokeJourneyAPI(dataSecurityEnabled, journeyRequestObj) {
    
    if(ratingValue != "")
    {
		currentFormContext.journeyJsonObject.RequestPayload.formData.journeyStateInfo[currentFormContext.journeyJsonObject.RequestPayload.formData.journeyStateInfo.length-1].feedback = ratingValue;
    }
	makeRestAPICall(dataSecurityEnabled, currentFormContext.journeyApiUri, 'POST', journeyRequestObj, 'application/json', 'json', noLoader, noLoader, function (successResponseObj) {
		currentFormContext.journeyUpdateStatus = true;
		if (currentFormContext.leadProfileId == "") {
			currentFormContext.leadProfileId = successResponseObj.lead_profile_info.leadProfileId;
			currentFormContext.journeyApiUri = "/content/hdfc_commonforms/api/journeydropoffupdate.json";
		}
	}, function (errorResponseObj) {
		currentFormContext.journeyUpdateStatus = false;
	});
}

function noLoader() {
	//return
}

function getFormData() {
   
	var data;
	window.guideBridge.getFormDataString({
		success: function (guideResObj) {
			data = guideResObj.data;
		}
	});
	return data;
}

function createJourneyStateObject(journeyState) {
	var journeyStateObject = {};
	journeyStateObject.stateInfo = {};
    //journeyStateObject.stateInfo.data = {};
	var formData = getFormData();
	var stateInfo = JSON.parse(formData);
    journeyStateObject.stateInfo = JSON.stringify(stateInfo.afData.afBoundData.data[currentFormContext.schemaName]);
	journeyStateObject.state = journeyState;
	journeyStateObject.timeinfo = getFormattedDate();
	return journeyStateObject;
}


function updatedJsonObject(journeyState) {

    currentFormContext.journeyState = journeyState;
    
	if (currentFormContext.leadProfileId !== "" && (currentFormContext.journeyUpdateStatus)) {
		resetJourneyJsonObject(currentFormContext.journeyJsonObject);
	}

	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.leadProfileId = currentFormContext.leadProfileId;
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.profile.fullName = currentFormContext.primaryCardHolderName;
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.aanNumber = currentFormContext.aanNumber;
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.emailId = currentFormContext.emailId;
	currentFormContext.journeyJsonObject.RequestPayload.leadProfile.officialEmailId = currentFormContext.officialEmailId;
	currentFormContext.journeyJsonObject.RequestPayload.formData.journeyStateInfo[currentFormContext.journeyJsonObject.RequestPayload.formData.journeyStateInfo.length] = createJourneyStateObject(journeyState);
    return currentFormContext.journeyJsonObject;

}

function resetJourneyJsonObject(jsonObj) {
	var i;
	for (i = jsonObj.RequestPayload.formData.journeyStateInfo.length - 1; i >= 0; i--) {
		jsonObj.RequestPayload.formData.journeyStateInfo.pop();
	}
	return jsonObj;
}

